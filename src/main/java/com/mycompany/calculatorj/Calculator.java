/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.calculatorj;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.List;

/**
 * A calculator program which figures solves basic math operations
 * @version June 10, 2023
 * @author r.hira
 */
public class Calculator extends javax.swing.JFrame {

    /**
     * Stores the current number input.
     */
    private String currentNum = "";

    /**
     * Stores the current mathematical operation.
     */
    private String operation = "";

    /**
     * Stores the first number for the operation.
     */
    private String firstNum = "";

    /**
     * Stores the result of the calculation.
     */
    private double result = 0;

    /**
     * Stores the memory value for M+, M-, MR operations.
     */
    private double memory = 0;

    /**
     * Stores the calculation history.
     */
    private List<String> history = new ArrayList<>();

    /**
     * Flag to indicate if the calculator is in scientific mode.
     */
    private boolean scientificMode = false;

    /**
     * Creates new form Calculator
     */
    public Calculator() {
        initComponents();
        setupKeyboardListener();
    }

    /**
     * Sets up keyboard listener for number and operation inputs
     */
    private void setupKeyboardListener() {
        this.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
                char key = e.getKeyChar();
                if (Character.isDigit(key)) {
                    Display.setText(Display.getText() + key);
                } else if (key == '+') {
                    ButtonAddActionPerformed(null);
                } else if (key == '-') {
                    ButtonSubActionPerformed(null);
                } else if (key == '*' || key == 'x' || key == 'X') {
                    ButtonTimesActionPerformed(null);
                } else if (key == '/') {
                    ButtonDivActionPerformed(null);
                } else if (key == '=' || key == KeyEvent.VK_ENTER) {
                    ButtonEqualActionPerformed(null);
                } else if (key == '.') {
                    ButtonDotActionPerformed(null);
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {}

            @Override
            public void keyReleased(KeyEvent e) {}
        });
        this.setFocusable(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Button7 = new javax.swing.JButton();
        Button4 = new javax.swing.JButton();
        Button1 = new javax.swing.JButton();
        Button8 = new javax.swing.JButton();
        Button5 = new javax.swing.JButton();
        Button2 = new javax.swing.JButton();
        Button9 = new javax.swing.JButton();
        Button6 = new javax.swing.JButton();
        Button3 = new javax.swing.JButton();
        ButtonAdd = new javax.swing.JButton();
        ButtonSub = new javax.swing.JButton();
        Button0 = new javax.swing.JButton();
        ButtonTimes = new javax.swing.JButton();
        ButtonDiv = new javax.swing.JButton();
        ButtonDot = new javax.swing.JButton();
        ButtonAC = new javax.swing.JButton();
        ButtonSQ = new javax.swing.JButton();
        ButtonEqual = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Display = new javax.swing.JTextArea();
        
        // New Scientific Calculator Buttons
        ButtonSin = new javax.swing.JButton();
        ButtonCos = new javax.swing.JButton();
        ButtonTan = new javax.swing.JButton();
        ButtonSqrt = new javax.swing.JButton();
        ButtonPercent = new javax.swing.JButton();
        
        // Memory Function Buttons
        ButtonMPlus = new javax.swing.JButton();
        ButtonMMinus = new javax.swing.JButton();
        ButtonMR = new javax.swing.JButton();
        ButtonMC = new javax.swing.JButton();

        // History Display
        historyDisplay = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Scientific Calculator");

        Button7.setText("7");
        Button7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button7ActionPerformed(evt);
            }
        });

        Button4.setText("4");
        Button4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button4ActionPerformed(evt);
            }
        });

        Button1.setText("1");
        Button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button1ActionPerformed(evt);
            }
        });

        Button8.setText("8");
        Button8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button8ActionPerformed(evt);
            }
        });

        Button5.setText("5");
        Button5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button5ActionPerformed(evt);
            }
        });

        Button2.setText("2");
        Button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button2ActionPerformed(evt);
            }
        });

        Button9.setText("9");
        Button9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button9ActionPerformed(evt);
            }
        });

        Button6.setText("6");
        Button6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button6ActionPerformed(evt);
            }
        });

        Button3.setText("3");
        Button3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button3ActionPerformed(evt);
            }
        });

        ButtonAdd.setText("+");
        ButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddActionPerformed(evt);
            }
        });

        ButtonSub.setText("-");
        ButtonSub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSubActionPerformed(evt);
            }
        });

        Button0.setText("0");
        Button0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button0ActionPerformed(evt);
            }
        });

        ButtonTimes.setText("X");
        ButtonTimes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonTimesActionPerformed(evt);
            }
        });

        ButtonDiv.setText("/");
        ButtonDiv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonDivActionPerformed(evt);
            }
        });

        ButtonDot.setText(".");
        ButtonDot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonDotActionPerformed(evt);
            }
        });

        ButtonAC.setText("AC");
        ButtonAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonACActionPerformed(evt);
            }
        });

        ButtonSQ.setText("^");
        ButtonSQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSQActionPerformed(evt);
            }
        });

        ButtonEqual.setText("=");
        ButtonEqual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonEqualActionPerformed(evt);
            }
        });

        // Configure new buttons
        ButtonSin.setText("sin");
        ButtonSin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSinActionPerformed(evt);
            }
        });

        ButtonCos.setText("cos");
        ButtonCos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCosActionPerformed(evt);
            }
        });

        ButtonTan.setText("tan");
        ButtonTan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonTanActionPerformed(evt);
            }
        });

        ButtonSqrt.setText("√");
        ButtonSqrt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSqrtActionPerformed(evt);
            }
        });

        ButtonPercent.setText("%");
        ButtonPercent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonPercentActionPerformed(evt);
            }
        });

        ButtonMPlus.setText("M+");
        ButtonMPlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonMPlusActionPerformed(evt);
            }
        });

        ButtonMMinus.setText("M-");
        ButtonMMinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonMMinusActionPerformed(evt);
            }
        });

        ButtonMR.setText("MR");
        ButtonMR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonMRActionPerformed(evt);
            }
        });

        ButtonMC.setText("MC");
        ButtonMC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonMCActionPerformed(evt);
            }
        });

        // Configure history display
        historyDisplay.setColumns(20);
        historyDisplay.setRows(5);
        historyDisplay.setEditable(false);
        jScrollPane2.setViewportView(historyDisplay);

        Display.setColumns(20);
        Display.setRows(5);
        jScrollPane1.setViewportView(Display);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Button1)
                                .addGap(18, 18, 18)
                                .addComponent(Button2)
                                .addGap(18, 18, 18)
                                .addComponent(Button3)
                                .addGap(18, 18, 18)
                                .addComponent(Button0))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Button4)
                                .addGap(18, 18, 18)
                                .addComponent(Button5)
                                .addGap(18, 18, 18)
                                .addComponent(Button6)
                                .addGap(18, 18, 18)
                                .addComponent(ButtonSub)))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ButtonDot)
                                .addGap(26, 26, 26)
                                .addComponent(ButtonEqual))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ButtonDiv)
                                .addGap(26, 26, 26)
                                .addComponent(ButtonSQ))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(Button7)
                        .addGap(18, 18, 18)
                        .addComponent(Button8)
                        .addGap(18, 18, 18)
                        .addComponent(Button9)
                        .addGap(18, 18, 18)
                        .addComponent(ButtonAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ButtonTimes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ButtonAC, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)))
                .addGap(0, 20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Button7)
                    .addComponent(Button8)
                    .addComponent(Button9)
                    .addComponent(ButtonAdd)
                    .addComponent(ButtonTimes)
                    .addComponent(ButtonAC))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Button4)
                    .addComponent(Button5)
                    .addComponent(Button6)
                    .addComponent(ButtonSub)
                    .addComponent(ButtonDiv)
                    .addComponent(ButtonSQ))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Button2)
                    .addComponent(Button3)
                    .addComponent(Button0)
                    .addComponent(Button1)
                    .addComponent(ButtonDot)
                    .addComponent(ButtonEqual))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    /**
     * Performs the action when the division button is clicked. This method
     * handles the logic for division operation in the calculator.
     *
     * @param evt The action event generated by the division button.
     */
    private void ButtonDivActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonDivActionPerformed
        // TODO add your handling code here:
        
        //if statement checking if operation is empty to make the result the display text and set text ""
        if (operation.equals("")) {
            result = Double.parseDouble(Display.getText());
            Display.setText("");
        }
        
        //operation is '/'
        operation = "/";

        //set black method
        setBlack();
        
        //change the operations color
        ButtonDiv.setForeground(Color.red);
    }//GEN-LAST:event_ButtonDivActionPerformed
    
    /**
     * Performs the action when the clear button is clicked. This method handles
     * the logic for resetting the calculator to its initial state.
     *
     * @param evt The action event generated by the clear button.
     */
    private void ButtonACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonACActionPerformed
        // TODO add your handling code here:

        //change display text to blank, result 0, operation blank and set black method to change color
        Display.setText("");
        result = 0;
        operation = "";
        setBlack();
    }//GEN-LAST:event_ButtonACActionPerformed

    /**
     * Performs the action when the number 8 button is clicked. This method
     * handles the logic for appending the number 8 to the display.
     *
     * @param evt The action event generated by the number 8 button.
     */
    private void Button8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button8ActionPerformed
        // TODO add your handling code here:

        //set the display text by getting display text plus the button text
        Display.setText(Display.getText()+Button8.getText());
    }//GEN-LAST:event_Button8ActionPerformed

    
    /**
 * Performs the action when the square root button is clicked.
 * This method handles the logic for square root operation in the calculator.
 *
 * @param evt The action event generated by the square root button.
 */
    private void ButtonSQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSQActionPerformed
        // TODO add your handling code here:

        //if statement checking if operation is empty to make the result the display text and set text ""
        if (operation.equals("")) {
            result = Double.parseDouble(Display.getText());
            Display.setText("");
        }

        //operation is 'sqrt'
        operation = "sqrt";

        //set black method
        setBlack();
        
        //change the operations color
        ButtonSQ.setForeground(Color.red);
        
    }//GEN-LAST:event_ButtonSQActionPerformed

    /**
    * Performs the action when the number 1 button is clicked.
    * This method handles the logic for appending the number 1 to the display.
    *
    * @param evt The action event generated by the number 1 button.
    */
    private void Button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button1ActionPerformed
        // TODO add your handling code here:

        //set the display text by getting display text plus the button text
        Display.setText(Display.getText() + Button1.getText());
    }//GEN-LAST:event_Button1ActionPerformed

    /**
     * Performs the action when the number 4 button is clicked. This method
     * handles the logic for appending the number 4 to the display.
     *
     * @param evt The action event generated by the number 4 button.
     */
    private void Button4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button4ActionPerformed
        // TODO add your handling code here:

        //set the display text by getting display text plus the button text
        Display.setText(Display.getText() + Button4.getText());
    }//GEN-LAST:event_Button4ActionPerformed

    /**
     * Performs the action when the number 7 button is clicked. This method
     * handles the logic for appending the number 7 to the display.
     *
     * @param evt The action event generated by the number 7 button.
     */
    private void Button7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button7ActionPerformed
        // TODO add your handling code here:

        //set the display text by getting display text plus the button text
        Display.setText(Display.getText() + Button7.getText());
    }//GEN-LAST:event_Button7ActionPerformed

    /**
     * Performs the action when the number 9 button is clicked. This method
     * handles the logic for appending the number 9 to the display.
     *
     * @param evt The action event generated by the number 9 button.
     */
    private void Button9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button9ActionPerformed
        // TODO add your handling code here:

        //set the display text by getting display text plus the button text
        Display.setText(Display.getText() + Button9.getText());
    }//GEN-LAST:event_Button9ActionPerformed

    /**
     * Performs the action when the number 6 button is clicked. This method
     * handles the logic for appending the number 6 to the display.
     *
     * @param evt The action event generated by the number 6 button.
     */
    private void Button6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button6ActionPerformed
        // TODO add your handling code here:

        //set the display text by getting display text plus the button text
        Display.setText(Display.getText() + Button6.getText());
    }//GEN-LAST:event_Button6ActionPerformed

    /**
     * Performs the action when the number 3 button is clicked. This method
     * handles the logic for appending the number 3 to the display.
     *
     * @param evt The action event generated by the number 3 button.
     */
    private void Button3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button3ActionPerformed
        // TODO add your handling code here:

        //set the display text by getting display text plus the button text
        Display.setText(Display.getText() + Button3.getText());
    }//GEN-LAST:event_Button3ActionPerformed

    /**
     * Performs the action when the number 2 button is clicked. This method
     * handles the logic for appending the number 2 to the display.
     *
     * @param evt The action event generated by the number 2 button.
     */
    private void Button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button2ActionPerformed
        // TODO add your handling code here:

        //set the display text by getting display text plus the button text
        Display.setText(Display.getText() + Button2.getText());
    }//GEN-LAST:event_Button2ActionPerformed

    
    /**
     * Performs the action when the number 5 button is clicked. This method
     * handles the logic for appending the number 5 to the display.
     *
     * @param evt The action event generated by the number 5 button.
     */
    private void Button5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button5ActionPerformed
        // TODO add your handling code here:

        //set the display text by getting display text plus the button text
        Display.setText(Display.getText() + Button5.getText());
    }//GEN-LAST:event_Button5ActionPerformed

    /**
     * Performs the action when the addition button is clicked. This method
     * handles the logic for addition operation in the calculator.
     *
     * @param evt The action event generated by the addition button.
     */
    private void ButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAddActionPerformed
        // TODO add your handling code here:

        //if statement checking if operation is empty to make the result the display text and set text ""
        if (operation.equals("")) {
            result = Double.parseDouble(Display.getText());
            Display.setText("");
        }

        //operation is '+'
        operation = "+";

        setBlack();
        ButtonAdd.setForeground(Color.red);

    }//GEN-LAST:event_ButtonAddActionPerformed

    /**
     * Performs the action when the subtraction button is clicked. This method
     * handles the logic for subtraction operation in the calculator.
     *
     * @param evt The action event generated by the subtraction button.
     */
    private void ButtonSubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSubActionPerformed
        // TODO add your handling code here:

        //if statement checking if operation is empty to make the result the display text and set text ""
        if (operation.equals("")) {
            result = Double.parseDouble(Display.getText());
            Display.setText("");
        }

        //operation is '-'
        operation = "-";

        //set black method
        setBlack();
        
        //change the operations color
        ButtonSub.setForeground(Color.red);
    }//GEN-LAST:event_ButtonSubActionPerformed

    /**
     * Performs the action when the dot button is clicked. This method handles
     * the logic for adding a decimal point to the display.
     *
     * @param evt The action event generated by the dot button.
     */
    private void ButtonDotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonDotActionPerformed
        // TODO add your handling code here:

        Display.setText(Display.getText()+ButtonDot.getText());
    }//GEN-LAST:event_ButtonDotActionPerformed

    /**
     * Performs the action when the equal button is clicked. This method handles
     * the logic for performing the calculation and displaying the result.
     *
     * @param evt The action event generated by the equal button.
     */
    private void ButtonEqualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonEqualActionPerformed
        // TODO add your handling code here:

        
        double num2 = Double.parseDouble(Display.getText());
        
        

        if (operation.equals("+")) {
            result = result + num2;
        } else if (operation.equals("X")) {
            result = result * num2;
        } else if (operation.equals("-")) {
            result = result - num2;
        } else if (operation.equals("/")) {
            result = result / num2;
        } else if (operation.equals("sqrt")) {
            result = Math.pow(result, num2);
        }
        

        Display.setText(String.valueOf(result));

        operation = "";
        result = 0;
        setBlack();

    }//GEN-LAST:event_ButtonEqualActionPerformed

    /**
     * Performs the action when the multiplication button is clicked. This
     * method handles the logic for multiplication operation in the calculator.
     *
     * @param evt The action event generated by the multiplication button.
     */
    private void ButtonTimesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonTimesActionPerformed
        // TODO add your handling code here:

        //if statement checking if operation is empty to make the result the display text and set text ""
        if (operation.equals("")) {
            result = Double.parseDouble(Display.getText());
            Display.setText("");
        }

        //operation is 'X'
        operation = "X";

        //set black method
        setBlack();
        
        //change the operations color
        ButtonTimes.setForeground(Color.red);

    }//GEN-LAST:event_ButtonTimesActionPerformed

    /**
     * Performs the action when the number 0 button is clicked. This method
     * handles the logic for appending the number 0 to the display.
     *
     * @param evt The action event generated by the number 0 button.
     */
    private void Button0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button0ActionPerformed
        // TODO add your handling code here:

        //set the display text by getting display text plus the button text
        Display.setText(Display.getText()+Button0.getText());
    }//GEN-LAST:event_Button0ActionPerformed

     /**
     * Sets the color of the operator buttons to black. This method is used to
     * reset the color of operator buttons to their default state.
     */
    private void setBlack() {
        ButtonAdd.setForeground(Color.black);
        ButtonSub.setForeground(Color.black);
        ButtonTimes.setForeground(Color.black);
        ButtonDiv.setForeground(Color.black);
        ButtonSQ.setForeground(Color.black);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Calculator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Button0;
    private javax.swing.JButton Button1;
    private javax.swing.JButton Button2;
    private javax.swing.JButton Button3;
    private javax.swing.JButton Button4;
    private javax.swing.JButton Button5;
    private javax.swing.JButton Button6;
    private javax.swing.JButton Button7;
    private javax.swing.JButton Button8;
    private javax.swing.JButton Button9;
    private javax.swing.JButton ButtonAC;
    private javax.swing.JButton ButtonAdd;
    private javax.swing.JButton ButtonDiv;
    private javax.swing.JButton ButtonDot;
    private javax.swing.JButton ButtonEqual;
    private javax.swing.JButton ButtonSQ;
    private javax.swing.JButton ButtonSub;
    private javax.swing.JButton ButtonTimes;
    private javax.swing.JTextArea Display;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea historyDisplay;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
